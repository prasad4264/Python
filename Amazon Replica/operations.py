import json
import string
import random
from json import JSONDecodeError

def Register(type,member_json_file,admin_json_file,Full_Name,Address,Email,Password):
    '''Register Function || Return True if registered successfully else False'''
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='member':
        f=open(member_json_file,'r+')
        d={
            "Full Name":Full_Name,
            "Address":Address,
            "Email":Email,
            "Password":Password,
        }
        try:
            content=json.load(f)
            if d not in content:
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    else:
        return False

def Login(type,members_json_file,admin_json_file,Email,Password):
    '''Login Functionality || Return True if successfully logged in else False'''
    d=0
    if type.lower()=='admin':
        f=open(admin_json_file,'r+')
    else:
        f=open(members_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Email"]==Email and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def Create_Product(owner,product_json_file,product_ID,product_name,manufacturer_name,price,discount,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    file = open(product_json_file,'r+')
    details = {
        "Created By":owner,
        "Product ID":product_ID,
        "Product Name":product_name,
        "Manufacturer Name": manufacturer_name,
        "Price":price,
        "Discount":discount,
        "Total Stock Available":total_stock_available
    }
    try:
        data = json.load(file)
        if details not in data:
            data.append(details)
            file.seek(0)
            file.truncate()
            json.dump(data,file)
    except JSONDecodeError:
        l = []
        l.append(details)
        json.dump(l,file)
    file.close()
    return True
    

def Read_Products(owner,product_json_file):
    '''Reading Products created by the admin(owner)'''
    with open(product_json_file,'r') as file:
        try:
            product_list = []
            data = json.load(file)
            for i in range(len(data)):
                if data[i]["Created By"] == owner:
                    product_list.append(data[i])
            return product_list
        except JSONDecodeError:
            return "No data found"
  

def Read_Product_By_ID(product_json_file,product_ID,Details):
    '''Reading product by ID'''
    with open(product_json_file,'r') as file:
        try:
            dtls = Details
            data = json.load(file)
            for product in data:
                if product["Product ID"] == product_ID:
                    dtls.append(product)
                    return dtls
        except JSONDecodeError:
            return "No data found"

def Update_Product(product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''
    with open(product_json_file,'r+') as file:
        try:
            data = json.load(file)
            dtl = []
            for details in range(len(data)):
                if data[details]["Product ID"] == product_ID:
                    detail_to_be_updated = str(detail_to_be_updated)
                    new_value = str(new_value)
                    data[details][detail_to_be_updated] = new_value
                    dtl.append(data[details])
                    return True
                else:
                    dtl.append(data[details])

            file.seek(0)
            file.truncate()
            json.dump(dtl,file)
            return True
        except JSONDecodeError:
            return False

    
def Delete_Product(product_json_file,product_ID):
    '''Deleting Product || Return True if successfully deleted else False'''
    with open(product_json_file,'r+') as file:
        try:
            content=json.load(file)
            for data in range(len(content)):
                if content[data]["Product ID"] == product_ID:
                    content.pop(data)
                    file.seek(0)
                    file.truncate()
                    json.dump(content,file)
        except JSONDecodeError:
            return False
    return True
    

def Update_Member(member_json_file,name,detail_to_be_updated,new_value):
    '''Updating Member Details || Return True if successfully updated else False'''
    with open(member_json_file,'r+') as file:
        try:
            data = json.load(file)
            dtl = []
            for details in range(len(data)):
                if data[details]["Full Name"] == name:
                    detail_to_be_updated = str(detail_to_be_updated)
                    new_value = str(new_value)
                    data[details][detail_to_be_updated] = new_value
                    dtl.append(data[details])
                    return True
                else:
                    dtl.append(data[details])

            file.seek(0)
            file.truncate()
            json.dump(dtl,file)
            return True
        except JSONDecodeError:
            return False

    

def Place_Order(order_json_file,ordered_by,delivery_address,product_json_file,product_ID,Quantity,Order_ID):
    '''Placing Order, Calculate the Price after discount and Total cost of the order || Return True if order placed successfully else False'''
    with open(product_json_file,'r') as file:
        try:
            data = json.load(file)
            for i in range(len(data)):
                if data[i]["Product ID"] == product_ID:
                    s = ""
                    c = data[i]["Discount"]
                    for k in c:
                        if k !="%":
                            s+=k
                    n = data[i]["Price"] 
                    p = n - (n*(int(s)/100))
                    t = Quantity * p
                    d = {
                        "Order ID" :Order_ID,
                        "Product Name" :data[i]["Product Name"],
                        "Price" : data[i]["Price"],
                        "Discount": data[i]["Discount"],
                        "Price after Discount" : p,
                        "Quantity" : Quantity,
                        "Total Cost": t,
                        "Ordered By": ordered_by,
                        "Delivering to" : delivery_address
                    }
        except JSONDecodeError:
            return False
    with open (order_json_file,'r+') as detail:
        try:
            details = json.load(detail)
            details.append(d)
            detail.seek(0)
            detail.truncate()
            json.dump(details,detail)
        except JSONDecodeError:
            return False
        return True

def Order_History(order_json_file,Name,details):
    '''Append the order information into details list'''
    with open(order_json_file,"r") as file:
        try:
            data = json.load(file)
            detail = details
            for i in range(len(data)):
                if data[i]["Ordered By"] == Name:
                    detail.append(data[i])
            return detail
        except JSONDecodeError:
            return False


    

